name: release
on:
  push:
      tags: 
        - 'v*'

jobs:
  create_release:
    name: "Create Release"
    runs-on : ubuntu-20.04
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - uses: actions/checkout@v2
      - name: Create Source Release
        id: create_release
        uses: actions/create-release@v1.0.0
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          draft: false
          prerelease: false 
  build_and_upload:
    name: "Build and Release"
    needs: create_release
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      fail-fast: false
      matrix:
        os:
          # - ubuntu-18.04
          - ubuntu-20.04
          - macos-latest
#           - windows-2016
#           - windows-latest
        llvm:
          - 10
        config:
          - Release
        include:
            # - os: ubuntu-18.04
            #   cc: /usr/bin/gcc-9
            #   cxx: /usr/bin/g++-9
            #   llvm_dir: /usr/lib/llvm-
            - os: ubuntu-20.04
              cc: /usr/bin/gcc-9
              cxx: /usr/bin/g++-9
              llvm_dir: /usr/lib/llvm
              zip_postfix: Linux
            - os: macos-latest
              cc: /usr/bin/clang
              cxx: /usr/bin/clang++
              llvm_dir: /usr/local/opt/llvm@
              zip_postfix: Darwin
#           - os: windows-2016
#             cmake-generator: -G "Visual Studio 15 2017" -A x64
#           - os: windows-latest
#             cmake-generator: -G "Visual Studio 16 2019" -A x64
    steps:
      - uses: actions/checkout@v2
      - if: contains(matrix.os, 'ubuntu')
        name: deps-ubuntu
        run: |
          sudo apt update
          sudo apt-get install libalsa-ocaml-dev libfl-dev libbison-dev libz-dev libsndfile-dev libopus-dev llvm-${{matrix.llvm}}-dev clang-10 libclang-10-dev gcc-9  libgtest-dev
          sudo mkdir /usr/lib/llvm && sudo ln -s /usr/lib/llvm-10** /usr/lib/llvm
  
      # - if: contains(matrix.os, 'ubuntu-18.04')
      #   name: deps-bison-latest-for-bionic
      #   run: |
      #     wget http://ftp.gnu.org/gnu/bison/bison-3.6.tar.gz
      #     tar -xzvf bison-3.6.tar.gz
      #     pushd bison-3.6 && ./configure --prefix=/usr && make && sudo make install && popd
      - if: contains(matrix.os, 'macos')
        name: deps-macos
        run: |
          brew update
          brew install flex bison libsndfile llvm@${{matrix.llvm}}
      # - name: install-googletest
      #   run: |
      #     git clone https://github.com/google/googletest.git && pushd googletest
      #     mkdir build && pushd build && cmake .. && make -j && popd
      #     sudo cp -r googletest/include/gtest /usr/local/include/gtest
      #     sudo cp -r googlemock/include/gmock /usr/local/include/gmock
      #     sudo cp build/lib/*.a /usr/local/lib/
      - name: configure
        env:
          LLVM_DIR: ${{ matrix.llvm_dir }}${{ matrix.llvm}}/lib/cmake
        run:
          mkdir build && cd build && cmake ${{ matrix.cmake-generator }}-DCMAKE_BUILD_CONFIG=${{ matrix.config }} -DCMAKE_C_COMPILER=${{ matrix.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }}  -DBUILD_TEST=OFF ..

      - name: build
        run: cmake --build build --config ${{ matrix.config }}

      - name: pack
        run: cd build && cpack && cd ../

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

      - name: Upload Compiled Binary
        id: upload-release-asset
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./build/mimium-${{ steps.get_version.outputs.VERSION }}-${{ matrix.zip_postfix }}.zip
          asset_name: mimium-${{ steps.get_version.outputs.VERSION }}-${{ matrix.zip_postfix }}.zip
          asset_content_type: application/zip

  